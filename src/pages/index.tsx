import Head from 'next/head'
import CodeMirror, { ViewUpdate } from '@uiw/react-codemirror'
import { EditorView } from "@codemirror/view"
import { useState } from 'react'
import * as djot from '@djot/djot'
import { AlertCircle } from 'lucide-react'

import Preview from '@/components/Preview'
import { Button } from '@/components/ui/button'
import { Warning } from '@djot/djot/types/options'

export default function Home() {
  const [html, setHtml] = useState('')
  const [uuid, setUuid] = useState('')
  const [warning, setWarning] = useState<Warning | null>(null)
  const onChange = (value: string, viewUpdate: ViewUpdate) => {
    let warned = false;
    const warnHandler = (w: Warning) => {
      setWarning(w)
      warned = true
    }
    const ast = djot.parse(value, {
      sourcePositions: true,
      warn: warnHandler
    })
    const markup = djot.renderHTML(ast, {
      warn: warnHandler
    })
    if (!warned) setWarning(null)
    setHtml(toHtml(markup))
  };

  const onSubmit = async () => {
    const response = await fetch('/new-djot', {
      method: 'POST',
      body: html,
    })

    const data = await response.text()
    console.log(`Response: ${data}`)
    setUuid(data)
  }

  const url = () => `/djots/${uuid}`

  return (
    <>
      <Head>
        <title>Djot Preview</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="w-screen h-screen overflow-auto grid grid-cols-2 grid-rows-[max-content_1fr]">
        <div className="mx-4 py-4 flex justify-between items-center gap-4 border-b-2">
          <div className="flex items-center gap-2">
            {warning
              ? <>
                <p className="flex items-center gap-2 text-destructive">
                  <AlertCircle className="h-4 w-4 min-w-min" />
                  Warning on line {warning.sourceLoc?.line}:
                </p>
                <p>{warning.message}</p>
              </>
              : <p>No warnings thus far</p>
            }
          </div>
        </div>
        <div className="mx-4 py-4 flex justify-between items-center gap-4 border-b-2">
          <p>Your djot is live at <a href={url()}>{url()}</a></p>
          <Button onClick={onSubmit}>Djot&nbsp;it</Button>
        </div>
        <div className="h-full p-4">
          <CodeMirror
            value=""
            placeholder="Write your Djot here..."
            height="100%"
            className="h-full text-lg border-2 rounded-xl overflow-clip"
            onChange={onChange}
            extensions={[EditorView.lineWrapping]}
          />
        </div>
        <Preview className="h-full w-full p-4 typography" html={html} />
      </main>
    </>
  )
}

function toHtml(markup: string) {
  return `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Djot</title>
    <link rel="stylesheet" href="/bamboo.css">
  </head>
  <body>
    ${markup}
  </body>
</html>`
}