import Head from 'next/head'
import CodeMirror from '@uiw/react-codemirror'
import { EditorView } from "@codemirror/view"
import { useEffect, useState } from 'react'
import { useLocalStorage, useMediaQuery } from 'usehooks-ts'
import { Warning } from '@djot/djot/types/options'
import { WarningCircle, Eye, PenNib } from '@phosphor-icons/react'

import Preview from '@/components/Preview'
import { Button } from '@/components/ui/button'
import { renderHtmlWithDjotExample, toFullHtml } from '@/lib/render'

import { stylesheets } from '@/config.json'

export default function Home() {
  const [content, setContent] = useLocalStorage('content', '')
  const [html, setHtml] = useState('')
  const [warning, setWarning] = useState<Warning | null>(null)
  const [uuid, setUuid] = useState<string | null>('')
  const [displayPreview, setDisplayPreview] = useState<'hidden' | 'flex'>('hidden')
  const md = useMediaQuery('(min-width: 768px)')

  const toggleDisplay = (current: "hidden" | "flex") => {
    return current === 'hidden' ? 'flex' : 'hidden'
  }

  const togglePreview = () => setDisplayPreview(toggleDisplay)

  const setHtmlFromContent = (content: string) => {
    let warned = false;
    const warnHandler = (w: Warning) => {
      setWarning(w)
      warned = true
    }
    const html = renderHtmlWithDjotExample(content, warnHandler)
    if (!warned) setWarning(null)
    setHtml(html)
  }

  const onCodeChange = (content: string) => {
    setContent(content)
    setHtmlFromContent(content)
  }

  const onSubmit = async () => {
    const response = await fetch('/new-djot', {
      method: 'POST',
      body: toFullHtml(html),
    })

    if (200 <= response.status && response.status < 300) {
      const data = await response.text()
      setUuid(data)
    } else {
      setUuid(null)
    }
  }

  const url = () => `/djots/${uuid}`

  // Effect run once after mount to render content loaded
  // from local storage
  useEffect(() => {
    setHtmlFromContent(content)
  }, [])

  return (
    <>
      <Head>
        <title>Djot Preview</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="w-screen h-screen overflow-auto flex">
        <div className={`${toggleDisplay(displayPreview)} w-full md:w-1/2 md:flex flex-col`}>
          <div className="min-h-[5rem] mx-4 flex justify-between items-center gap-2 border-b-2">
              {warning
                ? <p>
                    <span className="flex items-center gap-2 text-destructive">
                      <WarningCircle size={20} weight="light" />
                      Warning on line {warning.sourceLoc?.line}:
                    </span> {warning.message}
                  </p>
                : <p>No warnings thus far</p>
              }
              <Button variant="outline" size="icon" className="md:hidden" title="Preview Djot" onClick={togglePreview}>
                <Eye size={28} weight="light" />
              </Button>
          </div>
          <div className="h-full p-4">
            <CodeMirror
              value={content}
              placeholder="Write your Djot here..."
              height="100%"
              className="h-fit text-lg md:border-2 md:rounded-xl md:overflow-clip"
              onChange={onCodeChange}
              extensions={[EditorView.lineWrapping]}
              basicSetup={{
                lineNumbers: md,
                foldGutter: false,
              }}
            />
          </div>
        </div>
        <div className={`${displayPreview} w-full md:w-1/2 md:flex flex-col`}>
          <div className="min-h-[5rem] mx-4 py-4 flex justify-between items-center gap-4 border-b-2">
            <div className="flex items-center gap-4">
              <Button onClick={onSubmit}>Djot&nbsp;it</Button>
              {
                uuid === ''
                  ? null
                  : uuid
                    ? <p>Your djot is live at <a className="font-medium	underline" href={url()} target="_blank">{url()}</a></p>
                    : <p>Error submitting</p>
              }
            </div>
            <Button variant="outline" size="icon" className="md:hidden" title="Preview Djot" onClick={togglePreview}>
              <PenNib size={28} weight="light" />
            </Button>
          </div>
          <Preview className="h-fit w-full p-4 typography" html={html} stylesheets={stylesheets} />
        </div>
      </main>
    </>
  )
}
